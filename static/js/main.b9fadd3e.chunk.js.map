{"version":3,"sources":["types/SortTypes.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortTypes","TodoList","getVisibleTodos","onSelectTodo","selectTodo","list","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","onQuery","query","sortBy","onSortType","value","onChange","event","All","Active","Completed","placeholder","target","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","selectUser","setSelectUser","useEffect","userId","response","href","email","name","App","todoList","setTodoList","setQuery","setSortBy","setSelectTodo","handleSelectTodo","length","filter","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9fadd3e.chunk.js","sourcesContent":["export enum SortTypes {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Pops = {\n  getVisibleTodos: () => Todo[],\n  onSelectTodo: (value: Todo | null) => void,\n  selectTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Pops> = ({\n  getVisibleTodos,\n  onSelectTodo,\n  selectTodo,\n}) => {\n  const list = getVisibleTodos();\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          list.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': selectTodo?.id === todo.id,\n              })}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelectTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far', {\n                        'fa-eye-slash': selectTodo?.id === todo.id,\n                        'fa-eye': selectTodo?.id !== todo.id,\n                      },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { SortTypes } from '../../types/SortTypes';\n\ntype Props = {\n  onQuery: (value: string) => void,\n  query: string,\n  sortBy: SortTypes,\n  onSortType: (type: React.ChangeEvent<HTMLSelectElement>) => void,\n};\n\nexport const TodoFilter:React.FC<Props> = ({\n  onQuery,\n  query,\n  sortBy,\n  onSortType,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={sortBy}\n          onChange={event => onSortType(event)}\n        >\n          <option value={SortTypes.All}>All</option>\n          <option value={SortTypes.Active}>Active</option>\n          <option value={SortTypes.Completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={event => onQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            aria-label=\"delete-button\"\n            onClick={() => onQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL = (\n  'https://mate-academy.github.io/react_dynamic-list-of-todos/api'\n);\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL}${url}.json`;\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  onSelectTodo: (value: Todo | null) => void,\n  selectTodo: Todo,\n};\n\nexport const TodoModal: React.FC<Props> = ({ onSelectTodo, selectTodo }) => {\n  const [selectUser, setSelectUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(selectTodo.userId).then(response => setSelectUser(response));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectTodo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onSelectTodo(null)}\n              aria-label=\"close_button\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={classNames({\n                  'has-text-success': selectTodo.completed,\n                  'has-text-danger': !selectTodo.completed,\n                })}\n              >\n                {selectTodo.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${selectUser.email}`}>\n                {selectUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { SortTypes } from './types/SortTypes';\n\nexport const App: React.FC = () => {\n  const [todoList, setTodoList] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [sortBy, setSortBy] = useState(SortTypes.All);\n  const [selectTodo, setSelectTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos().then(response => setTodoList(response));\n  }, []);\n\n  const searchFilter = () => {\n    return todoList.filter(\n      todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n    );\n  };\n\n  const selectFilter = () => {\n    const list = searchFilter();\n\n    switch (sortBy) {\n      case SortTypes.Active:\n        return list.filter(todo => !todo.completed);\n      case SortTypes.Completed:\n        return list.filter(todo => todo.completed);\n      default:\n        return list;\n    }\n  };\n\n  const handleQuery = (value: string) => {\n    setQuery(value);\n  };\n\n  const handleSortType = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSortBy(event.target.value as SortTypes);\n  };\n\n  const handleSelectTodo = (value: Todo | null) => {\n    setSelectTodo(value);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onQuery={handleQuery}\n                query={query}\n                sortBy={sortBy}\n                onSortType={handleSortType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todoList.length === 0\n                ? <Loader />\n                : (\n                  <TodoList\n                    getVisibleTodos={selectFilter}\n                    onSelectTodo={handleSelectTodo}\n                    selectTodo={selectTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectTodo && (\n        <TodoModal onSelectTodo={handleSelectTodo} selectTodo={selectTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}